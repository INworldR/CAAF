[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "caaf"
version = "0.1.0"
description = "Claude Agentic AI Framework - A lightweight, extensible framework for building agentic AI systems"
authors = [{name = "INworld", email = "contact@inworld.dev"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "agents", "claude", "ollama", "framework", "agentic", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]

dependencies = [
    # API Clients
    "anthropic>=0.20.0",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",

    # Configuration & Data Handling
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "jsonlines>=4.0.0",

    # Type Safety & Validation
    "typing-extensions>=4.7.0",
    "pydantic>=2.0.0",

    # Async & Utilities
    "asyncio-throttle>=1.0.0",
    "rich>=13.0.0",  # For beautiful CLI output
    "click>=8.0.0",  # For CLI interface
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",  # Parallel testing

    # Code Quality
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "ruff>=0.0.290",  # Fast linter alternative

    # Development Tools
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

ollama = [
    # Optional: If ollama python client becomes available
    # "ollama>=0.1.0",
]

all = [
    "caaf[dev,docs,ollama]",
]

[project.urls]
Homepage = "https://github.com/INworld/CAAF"
Repository = "https://github.com/INworld/CAAF"
Documentation = "https://github.com/INworld/CAAF/wiki"
Issues = "https://github.com/INworld/CAAF/issues"
Changelog = "https://github.com/INworld/CAAF/blob/main/CHANGELOG.md"

[project.scripts]
caaf = "caaf.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.ruff_cache
  | build
  | dist
  | data
  | logs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "jsonlines.*",
    "anthropic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=caaf --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require API access",
    "ollama: marks tests that require Ollama to be running",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["caaf"]
omit = [
    "tests/*",
    "setup.py",
    "caaf/__init__.py",
    "*/migrations/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "\\.\\.\\.",
]
show_missing = true
precision = 2

# Ruff configuration (fast linter alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "ARG", "FBT"]

[dependency-groups]
dev = [
    "ruff>=0.11.11",
]
